Introduction:It all started with a simple question: What if a game could teach players to see patterns in chaos? This question sparked the journey that led to the creation of 'PolySpell,' a game where every polygon tells a story. Dive into a world where your creativity and strategy shape the outcome, and every decision leads to a new adventure.Project overview:In 'PolySpell,' players control Bob, a magical 2D ball navigating a neon-themed world filled with enemies and obstacles. The gameplay revolves around creating polygonal patterns known as 'trails,' which trigger various effects such as damaging enemies, breaking shields, or healing Bob.Genre: 2D Roguelike with Pattern-Based Spell Casting, Action, Strategy, and Puzzle-SolvingPlatforms: Desktop (with future plans for mobile)Target Audience: Fans of action-strategy games, ages 10 and upTime Frame: June-August 2024Core Mechanics¥ Pattern-Based Combat: Unique gameplay that combines action with strategic pattern creation.¥ Strategic Energy Management: Manage energy as you create trails and replenish it by hitting special energy balls.¥ Vibrant Neon Aesthetic: Immersive visuals that enhance the fast-paced, colorful gameplay."GAME PLAY & MECHANICS:Objective: Players must maneuver Bob to create trails that form magical polygons. Each polygon type triggers a unique effect, such as damaging enemies or healing Bob.Game LoopBob's Abilities: Bob can shoot and create trails by bouncing and moving around the screen. These trails form polygons with different effects based on their shape.         ¥ Energy System: Bob uses energy to form trails, which replenishes by defeating enemies. Effective energy management is crucial.         ¥  Enemies: Evil Balls threaten Bob and can grow stronger by consuming other elements. They can also be defeated by forming specific polygons around them.         ¥  Power-ups: Normal balls may turn into power-up balls, providing various boosts to Bob or the enemies depending on who defeats them.¥   Time-Limited: The game includes a time limit, and players aim to achieve the highest score possible within this period by defeating enemies and using energy strategically.         ¥  Game Pace: The gameplay alternates between fast-paced action and slow-motion effects for precise aiming.The gameplay is a blend of action and strategy, where players must manage their energy while navigating through enemies and obstacles. The pace of the game shifts between fast action and slow-motion moments that allow for precise aiming and strategic thinking. The neon visuals and responsive controls create an engaging and immersive experience for the player.Role and Contributions:"In this project, I was responsible for:¥ Programming: Implemented mechanics in Unity and C#, including the energy management system and polygon detection algorithms.¥ Game Design: Developed the core gameplay mechanics around pattern-based spell casting.¥ Art: integrated visual and audio elements, ensuring they aligned with the neon aesthetic.¥Playtesting: Conducted sessions that informed critical gameplay refinements."Development Process & Challenges:"While the development of 'PolySpell' was guided by a structured and iterative approach, focusing on both creative design and technical execution, creating 'PolySpell' was not without its challenges. Each obstacle provided an opportunity for innovation and growth. Here's how the journey unfolded:Iteration:1. Conceptualization and Prototyping?:The project began with brainstorming sessions to define the core gameplay mechanics and visual style. The idea of using polygonal patterns to trigger different effects became the central concept. I created prototypes to test the spell casting system, refining mechanics and establishing the foundation for the energy management system.2. Design and Iteration: With the core mechanics in place, I designed the initial level, focusing on gameplay flow, enemy placement, and challenges. An iterative design approach allowed for continuous refinement based on playtesting feedback, ensuring the game remained engaging and balanced.3. Technical Implementation: I implemented the core mechanics using Unity and C#, including the trail creation system, energy management, and ball-in-polygon detection. The latter required transitioning from a ray-casting approach to the more precise winding number algorithm to overcome accuracy issues.4. Visual and Audio Integration: Collaborating with artists, I integrated custom visuals and audio effects that matched the game's neon aesthetic. I also used assets from the Unity Asset Store to complement these elements.5. Playtesting and Feedback: Regular playtesting was integral to the development process. Feedback from testers helped identify areas for improvement, particularly in gameplay balance and user interface design. Iterative adjustments were made based on this feedback, enhancing the game's flow, difficulty, and overall player experience."Challenges:¥ Accurate Ball-in-Polygon Detection: One of the key technical challenges was accurately detecting whether a ball was inside a polygon. The initial solution was a ray-casting algorithm, but it proved imprecise due to rounding errors. I implemented the winding number algorithm, which provided more precise results and improved the robustness of the detection system.¥ Balancing Gameplay Mechanics: Ensuring that the game mechanics were challenging yet fair required extensive testing and refinement. Balancing the energy management and pattern creation systems was crucial to maintaining an engaging and rewarding player experience.¥ Visual and Audio Integration: Achieving a consistent and cohesive visual and audio experience was essential.I integrated neon visuals and dynamic audio into the game, while also incorporating assets from the Unity Asset Store. This required careful attention to detail to ensure a polished and unified aesthetic while I am definitely not a professional artist compared to my programming skills.Content for Player testingshow before after comparison¥ Initial Playtesting Sessions: Early playtesting was essential for identifying fundamental issues with gameplay, controls, and overall user experience.¥ Key Feedback Highlights: Players found the movement controls too sensitive and the difficulty curve too steep. Visual effects were also overwhelming at times.¥ Iterative Changes Based on Feedback: I fine-tuned control sensitivity, adjusted the difficulty curve, and toned down certain visual effects to improve focus and gameplay experience. ¥ Final Round of Testing: After making these changes, a final round of testing confirmed that the adjustments were effective, and overall feedback was very positive, indicating that the game was ready for release.¥ Continuous Feedback Loop: I plan to monitor player feedback post-release and am prepared to make updates based on community suggestions to ensure the game continues to meet player expectations."Project Outcome:Relection & Conclusion"'PolySpell' successfully met its goal of creating an engaging 2D roguelike that blends action, strategy, and puzzle-solving through pattern-based spell casting. The game currently features:¥ A fully developed initial level that effectively introduces and balances core mechanics.¥ Smooth and responsive gameplay optimized for desktop platforms, with plans for future expansion to mobile devices.¥ A cohesive neon-themed aesthetic combining custom and sourced assets.Reflection: Working on 'PolySpell' was a transformative experience. From integrating the winding number algorithm to refining gameplay through feedback, this project taught me the value of persistence and the importance of seeing the project as a whole. It highlighted the significance of feedback and iteration, leading to a polished and engaging final game."